/*
 * Copyright 2019 Stephen Davies
 *
 * This file is part of eagle2nc.
 *
 * eagle2nc is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * eagle2nc is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with eagle2nc. If not, see <https://www.gnu.org/licenses/>.
 */

package com.github.aushacker.eagle2nc.nc;

import java.awt.geom.Point2D;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.text.DecimalFormat;

import com.github.aushacker.eagle2nc.model.Board;

/**
 * @author Stephen Davies
 * @since March 2019
 */
public class Generator {

    private static final String TEST_FILE = "data/astable_555.brd";

    private static final String BASE_FILE = "target/astable_555_";

    private static final String DIMENSIONS_SUFFIX = "dims.nc";

    //private static final double DEFAULT_CLEARANCE = 1.0;

    private Board board;

    private PrintStream out;

    private ZStrategy zStrategy;

    private Generator(String file, ZStrategy zStrategy) {
        this.board = new Board(new File(file));
        this.out = System.out;
        this.zStrategy = zStrategy;
    }

    public static void main(String[] args) {
        Generator gen = new Generator(TEST_FILE, new SolenoidStrategy());

        try {
            gen.generate();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void endJob() {
        out.println(GCode.PROGRAM_END);
    }

    /**
     * Format 5.4.
     *
     * @return
     */
    private String formatAxisValue(double value) {
        DecimalFormat df = new DecimalFormat("####0.0###;-####0.0####");
        return df.format(value);
    }

    private void generate() throws IOException {
        generateDimensions();
    }

    /**
     * 
     */
    private void generateDimensions() throws IOException {
        setOutputFile(DIMENSIONS_SUFFIX);
        preamble();
        
        // Tool change to engraver
        toolChange(ToolType.ENGRAVER);

        // Move to start  position
        moveTo(board.getDimensions().start());

        // Start spindle
        spindleOn(24000);

        // Engrave board outline
        if (zStrategy.supportsMultiplePasses()) {
            zStrategy.engraveRough(out);
            board.getDimensions().forEach(p -> lineTo(p));
        }
        zStrategy.engraveFinish(out);
        board.getDimensions().forEach(p -> lineTo(p));
        
        // Head up
        zStrategy.toolChange(out);

        // Motor off
        spindleOff();
        endJob();
    }

    private void lineTo(Point2D p) {
        out.print(GCode.LINEAR);
        write(p);
    }

    private void moveTo(Point2D p) {
        out.print(GCode.RAPID);
        write(p);
    }

    /**
     * Common setup commands used by all jobs.
     */
    private void preamble() {
        out.println("( Generated by eagle2nc )");
        out.println("( " + " )");
        out.println("G90 ( absolute )");
        out.println("G21 ( mm )");
        out.println("G94 ( per minute )");
        out.println("G17 ( xy plane )");
    }

    private void setOutputFile(String suffix) throws IOException {
        if (out != null) {
            out.close();
        }
        out = new PrintStream(new FileOutputStream(BASE_FILE + suffix));
    }

    private void spindleOff() {
        out.println(GCode.SPINDLE_STOP);
    }

    private void spindleOn(int rpm) {
        out.print(GCode.SPINDLE_CW);
        out.print(" S");
        out.println(rpm);
    }

    private void toolChange(ToolType type) {
        
    }

    private void write(Point2D p) {
        out.print(" X");
        out.print(formatAxisValue(p.getX()));
        out.print(" Y");
        out.println(formatAxisValue(p.getY()));
    }
}
